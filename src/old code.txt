Local Filter

const localFilter = (value) => {
    const filtered = []
    games.forEach((game) => {
      let found = false
      Object.keys(game).forEach((key) => {
        if (!['played_hours', 'id', '_id'].includes(key)) {
          if (['completion', 'platform'].includes(key)) {
            if (game[key].name == value) {
              found = true
            }
          } else if (typeof game[key] === 'string') {
            if (game[key].includes(value)) {
              found = true
            }
          } else if (game[key].length) {
            // Array
            if (game[key].toString().includes(value)) {
              found = true
            }
          } else {
            if (game[key] == value) {
              found = true
            }
          }
        }
      })
      if (found) {
        filtered.push(game)
      }
    })
    setGamesAction({
      games: filtered,
      page,
      max
    })
  }

Filter Out JSX

<div className="filter-out">
        <h3> Filter Out </h3>
        <InputText
          placeholder="Name"
          className="p-inputtext-sm"
          {...register('nameOut')}
        />
        <InputText
          placeholder="Developer"
          className="p-inputtext-sm"
          {...register('developerOut')}
        />
        <InputText
          placeholder="Publisher"
          className="p-inputtext-sm"
          {...register('publisherOut')}
        />
        <InputText
          placeholder="Year"
          className="p-inputtext-sm"
          {...register('yearOut')}
        />
        <InputText
          placeholder="Played Year"
          className="p-inputtext-sm"
          {...register('played_yearOut')}
        />
        <InputText
          placeholder="Genre"
          className="p-inputtext-sm"
          {...register('genreOut')}
        />
        <Controller
          name="platformOut"
          control={control}
          render={({ field, fieldState }) => (
            <Dropdown
              id={field.name}
              placeholder="Platform"
              value={field.value}
              onChange={(e) => field.onChange(e.value)}
              options={platforms}
              optionLabel="name"
            />
          )}
        />
        <Controller
          name="completionOut"
          control={control}
          render={({ field, fieldState }) => (
            <Dropdown
              id={field.name}
              placeholder="Completion"
              value={field.value}
              onChange={(e) => field.onChange(e.value)}
              options={completions}
              optionLabel="name"
            />
          )}
        />
        <InputText
          placeholder="Score"
          className="p-inputtext-sm"
          {...register('scoreOut')}
        />
      </div>

      Debug scroll

      console.log('scrollHeight', scrollHeight)
      console.log('scrollTop', scrollTop)
      console.log('clientHeight', clientHeight)




      <div className="game-details-buttons flex justify-content-end gap-3 mt-2">
        <Button
          icon='pi pi-pencil'
          className="p-button-outlined p-button-rounded p-button-warning edit-button"
          onClick={editing.toggle}
        />
        <Button
          icon="pi pi-trash"
          className="p-button-rounded p-button-outlined p-button-danger delete-button"
          onClick={confirm}
        />
        <ConfirmDialog />
      </div>